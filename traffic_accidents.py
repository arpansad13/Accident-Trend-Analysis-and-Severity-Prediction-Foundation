# -*- coding: utf-8 -*-
"""Traffic_Accidents.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1x9JHbkjc7sr7Ty_NBzWKDheycUqlNG1X

**Overview:**
This dataset contains detailed information on traffic accidents across various regions and time periods. It includes various metrics such as accident date, weather conditions, lighting conditions, crash types, injuries, and vehicle involvement. The data spans multiple locations and accident types, offering a comprehensive view of traffic incidents and their causes.

https://www.kaggle.com/datasets/oktayrdeki/traffic-accidents/code

**Objective**
*   **Accident Analysis:** Analyze accident trends, types, and the severity of injuries across different locations, time periods, and conditions.
*   **Traffic Safety:** Understand the factors contributing to accidents (e.g., weather, lighting, road conditions) to inform traffic safety measures.
*   **Predictive Modeling:** Use the dataset to forecast accident hotspots, potential injuries, and the impact of various factors on crash severity.

**Characteristics of each columns**
*   **crash_date:** The date the accident occurred.
traffic_control_device: The type of traffic control device involved (e.g., traffic light, sign).
*   **weather_condition:** The weather conditions at the time of the accident.
*   **lighting_condition:** The lighting conditions at the time of the accident.
*   **first_crash_type:** The initial type of the crash (e.g., head-on, rear-end).
*   **trafficway_type:** The type of roadway involved in the accident (e.g., highway, local road).
*   **alignment:** The alignment of the road where the accident occurred (e.g., straight, curved).
*   **roadway_surface_cond:** The condition of the roadway surface (e.g., dry, wet, icy).
*   **road_defect:** Any defects present on the road surface.
*   **crash_type:** The overall type of the crash.
*   **intersection_related_i:** Whether the accident was related to an intersection.
*   **damage:** The extent of the damage caused by the accident.
*   **prim_contributory_cause:** The primary cause contributing to the crash.
*   **num_units:** The number of vehicles involved in the accident.
*   **most_severe_injury:** The most severe injury sustained in the crash.
*   **injuries_total:** The total number of injuries reported.
*   **injuries_fatal:** The number of fatal injuries resulting from the accident.
*   **injuries_incapacitating:** The number of incapacitating injuries.
*   **injuries_non_incapacitating:** The number of non-incapacitating injuries.
*   **injuries_reported_not_evident:** The number of injuries reported but not visibly evident.
*   **injuries_no_indication:** The number of cases with no indication of injury.
*   **crash_hour:** The hour the accident occurred.
*   **crash_day_of_week:** The day of the week the accident occurred.
*   **crash_month:** The month the accident occurred.
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

import warnings
warnings.filterwarnings('ignore')

data = pd.read_csv('traffic_accidents.csv')
data.sample(5)

data.info()

data.shape,data.size,data.ndim

df = data.copy(deep=True)

df['crash_date'] = pd.to_datetime(df['crash_date'])
df['crash_min'] = df['crash_date'].dt.minute
df['crash_day_of_week'] = df['crash_date'].dt.day_name()
df['crash_year'] = df['crash_date'].dt.year
df['crash_month'] = df['crash_date'].dt.month_name()
df = df.drop(columns=['crash_date'])

df.sample(5)

df.info()

plt.figure(figsize=(10,5))
ax = sns.countplot(x=df['crash_day_of_week'],color='red')

for i in ax.containers:
  ax.bar_label(i,)

plt.ylabel("No. of Accidents")
plt.title("No. of Accidents Day-Wise")
plt.show()

plt.figure(figsize=(12,5))
ax = sns.countplot(x=df['crash_year'],color='orange')

for i in ax.containers:
  ax.bar_label(i,)

plt.ylabel("No. of Accidents")
plt.title("No. of Accidents Year-Wise")
plt.show()

plt.figure(figsize=(12,5))
ax = sns.countplot(x=df['crash_month'],color='purple')

for i in ax.containers:
  ax.bar_label(i,)

plt.ylabel("No. of Accidents")
plt.title("No. of Accidents Month-Wise")
plt.show()

plt.figure(figsize=(15,5))
ax = sns.countplot(x=df['crash_hour'],color='pink')

for i in ax.containers:
  ax.bar_label(i,)

plt.ylabel("No. of Accidents")
plt.title("No. of Accidents Hour-Wise")
plt.show()

df.sample(2)

#We are onlt taking top 6 trafficway type as per values counts to make our analysis easy
trafficway_type_top6 = df['trafficway_type'].value_counts().head(6).reset_index()
trafficway_type_top6

plt.figure(figsize=(15,5))
ax = sns.barplot(x=trafficway_type_top6['trafficway_type'],y=trafficway_type_top6['count'],color='blue')
#plt.xticks(rotation=45)

for i in ax.containers:
  ax.bar_label(i,)

plt.ylabel("No. of Accidents")
plt.title("Top 6 Trafficway Type")
plt.show()

data = df['crash_type'].value_counts().values
keys = df['crash_type'].value_counts().index
explode = [0, 0.05]
plt.title("Crash_Type")

plt.pie(data,labels=keys,explode=explode, autopct='%.0f%%')
plt.show()

#We are taking top 5 weather condtions based on counts to make our analysis easy
weather_condition_top5 = df[(df['weather_condition'] == 'CLEAR') | (df['weather_condition'] == 'RAIN') | (df['weather_condition'] == 'CLOUDY/OVERCAST') | (df['weather_condition'] == 'SNOW') | (df['weather_condition'] == 'FREEZING RAIN/DRIZZLE')]

plt.figure(figsize=(12,5))
ax = sns.countplot(x=weather_condition_top5['weather_condition'],color='red')

for i in ax.containers:
  ax.bar_label(i,)

plt.ylabel("No. of Accidents")
plt.title("Top 5 Weather conditions")
plt.show()

plt.figure(figsize=(12,5))
ax = sns.countplot(x=df['lighting_condition'],color='violet')

for i in ax.containers:
  ax.bar_label(i,)

plt.ylabel("No. of Accidents")
plt.title("Lighting Conditions")
plt.show()

df.sample(5)

pd.crosstab(weather_condition_top5['weather_condition'],df['lighting_condition'],normalize=True,margins=True)

df['traffic_control_device'].value_counts().head(5)

"""**Insights:** From the above plots we can conclude that:

*   Number of accient occured on Friday is higher compared to other days and on Sunday least number of accients occured.
*   2018 and 2019 had maximun number of accidents. 2020 had slightly less number of accidents(lockdown Covid).
*   September, October, November and December found to have maximun number of crashes. (Festival session/ Winter season)
*   From 3 PM to 5 PM accidents counts are at peak. 11 PM to 6 AM least number of accidents(Night time less vechiles on road).
*   Non Divided trafficway found to be prime reason for most of the accidents. (Include speed limit or Divided roads).
*   56% of the accidents people had No injuries or they drove away and in 44% cases people had injuries or vechile was towed.
*   Weather had not much effect as majority of the accidents happended on Clear Weather conditions. Rain and snow weather conditions found to have some effect on accidents.
*   Majority of accidents happended at Daylight lightning conditions whereas Darkness could be also considered as a reason.
"""

df['crash_type'].value_counts()

plt.figure(figsize=(12,5))
ax = sns.countplot(x=df[df['crash_type'] == "INJURY AND / OR TOW DUE TO CRASH"]['lighting_condition'],color='y')

for i in ax.containers:
  ax.bar_label(i,)

plt.ylabel("No. of Accidents")
plt.title("INJURY AND / OR TOW DUE TO CRASH")
plt.show()

plt.figure(figsize=(14,5))
ax = sns.countplot(x=df[df['crash_type'] == "INJURY AND / OR TOW DUE TO CRASH"]['weather_condition'],color='g')

for i in ax.containers:
  ax.bar_label(i,)

plt.ylabel("No. of Accidents")
plt.xticks(rotation=45)
plt.title("INJURY AND / OR TOW DUE TO CRASH")
plt.show()

pd.crosstab(df['crash_type'],df['lighting_condition'],normalize=True,margins=True) #Checking the relationship between 'crash_type' and 'lighting_condtion'

"""**Chi-square test to check if crash_type is dependent on the lighting_condition**

Chi-square test is a statistical hypothesis test used to analyze contingency tables and determine the relationship between two categorical variables, or to assess if observed frequencies differ significantly from expected frequencies.

Basically this test determines if two categorical variables are related or independent of each other.

Assumptions: The data must be categorical, observations must be independent, and the expected frequencies in each category should be at least 5 for valid results

Let us assume that:

Null Hypothesis(Ho) -> There is no relationship or association between the categorical variables

Alternate Hypothesis(Ha) -> There is relationship or association between the categorical variables

alpha = 0.05(95% confidence level)
"""

contingency_table = pd.crosstab(df['crash_type'],df['lighting_condition']) #Taking crosstab between lighting_condition and crash_type column to establish the connection
contingency_table

from scipy.stats import chi2_contingency #importing required library for chi-square test

chi2_contingency(contingency_table) #performing chi-square contingency test

"""From the above chi-square contigency test between two categorial column "crash_type" and "lighting_condition" we can see that p-value(0.0) < alpha(0.05). So we will reject our null hypothesis.

We can conclude that there is relationship or association between the two categorical variables "crash_type" and "lighting_condition".

**Final Insights:**

1. Accident Trends:

  * The highest number of accidents occur on Fridays, with the lowest on Sundays.
  * Accident counts peaked in 2018 and 2019, with a slight decrease in 2020.
  * September, October, November, and December have the most accidents, possibly due to festivals and winter weather.
  * Accidents are most frequent between 3 PM and 5 PM and least frequent between 11 PM and 6 AM.

2. Accident Factors:

  * Non-divided roadways are associated with the most accidents, highlighting a need for speed limits or road division.
  * In 56% of cases, there were no injuries or the drivers drove away, while 44% involved injuries or towing.
  * Most accidents occur in clear weather, but rain and snow also play a role.
  * Daylight is the most common lighting condition during accidents, but darkness is also a contributing factor.

3. Injury and Tow Accidents:

  * Accidents resulting in injuries or towing are more likely to happen in daylight.
  * These types of accidents occur most often in clear weather, followed by rain and snow.

**Final Business Insights:**

1. Traffic Management:

  * Focus on Fridays and peak hours (3 PM-5 PM) for traffic management.
  * Improve safety measures on non-divided roadways.
  * Implement strategies to reduce accidents during festival seasons and winter months.

2. Road Safety:

  * Raise awareness about the risks associated with driving in darkness and adverse weather conditions.
  * Promote safe driving practices during peak accident times.

3. Infrastructure Improvements:

  * Consider dividing non-divided roadways or implementing speed limits to reduce accidents.
  * Improve lighting and visibility on roads to enhance safety.

4. Emergency Response:

  * Allocate resources strategically based on accident trends and high-risk areas.
  * Ensure prompt emergency response during peak accident times.

These insights can be used by government agencies, transportation departments, and other stakeholders to develop strategies for improving road safety and reducing traffic accidents.
"""